# 什么是面向对象
# 一种认识世界，分析世界的方法论，将万事万物抽象为对象
# 类 class
# 类是抽象概念，是万事万物的一个抽象，是一类事物的共同特征，集合
# 用计算机语言来描述类，就是属性和方法的集合
# 对象 instance ,object
# 对象是类的具象，一个个真实的实体
# 对于我们每个人的这个个个体，都是一个抽象的人类的不同的实体
# 举例
# 属性，它是对象的状态的抽象，用数据结构来描述
# 操作：它是对象的行为的抽象，用操作名来实现该操作的方法来描述
# 每个人都有名字，身高体重，等信息，这是个人的属性，但是，这些信息不能保存在人类
# 中，因为它是抽象的概念，不能保留其具体的值
# 而是人类的实例，是具体的人，他也可以是存储这些具体值的属性，而且可以是具体的人，有具体的属性
# 每个人，都，可以是具体的存在，
# 个体的事情，
# 人类的抽象的过程，具体的实例化的过程，分配给不同的值，人类
# 我未来，人类共同的抽象，在某一个实例，每一个人的身高和体重，
# 哲学
# 一切皆对象
# 对象是数据和操作的封装
# 对象是独立的，但是对象之间是可以相互作用的
# 目前 OOP是最接近人类的认知的编程范式
# 对象是属性和操作和方法的封装
# 数据，属性，对象是操作和数据封装
# 类的具体化，实例，面向对象，就是将
# 我们可以认为，每一个，对象之间，
# 你吃鱼，人类吃鱼类，一个具体的，吃了一个具体的鱼
# 对象之间可以相互作用
# 对象之间是可以相互使用的，对象之间是通过方法来相互作用的
# 目前人类的认知范围之内，就是面向对象编程，面向对象编程
# 专业的词汇
# 面向对象，请你说一下，面向对象的理论
# 封装
# 组装 ：将数据和操作组装到一起
# 隐藏数据：对外只暴露一些接口，通过接口访问对象，比如驾驶员使用汽车，不需要
# 了解汽车的构造细节，只需要知道使用了什么部件怎样四川驾驶就行，踩了油门就能跑，
# 可以不了解后面的机动原理
# 继承 ： 多复用，继承来就不用自己写了
# 多继承少修改
# 多态
# 面向对象编程最灵活的地方，动态绑定
# 人类具体封装
# 继承
# 多复用，继承来就不用自己写了
# 多继承少修改，OCP ，使用继承来改变
# 多态，面向对象编程最灵活的地方
# 人类只实现自己修改化的东西
# 人类有驾驶能力
# 当你用面向对象来解决一些问题，先要学习的时候，知道面向对象
# 能复用的就已经复用，复用可以了
# 个性，
# 这就是一个类的定义，show()方法
# class ClassName
#  语句块
# 1.必须使用 class 关键字
# 2.类名必须用大驼峰命名
# 3.类定义完成后，就产生了一个类的对象，绑定到标识符 ClassName 上
# 类的对象及类的属性
# 类的对象，类的定义，也是方法定义
# 没有不可变的
# 如果引用计数为零，概念被清除了，结合
# 代码写得越来越好了，
# 将本质性的东西
# 在每一个高级语言中
# MyClass ，x,foo 都是类的属性
# 原来他的认识没有达到这种程度
# 书没有
# MyClass 中
# foo 是方法对象method,
# 不是普通的函数对象 function，
# foo 是方法的对象，不是普通的函数对象 function
# 它一般可以是 self ，self 只是一个惯用的用法
# 可以换名字，这个参数的位置就留给 self 了
# 分析日志很重要，通过学幼师数据分析就能够知道是不遭受到了攻击，是不被爬取及爬取高峰期，是否有盗链等
# 百度爬虫名称
# 谷歌爬虫名称
#       目前实现的代码中，只能的接受一个文件，目录的, 如果
# 获取 log 的文件目录，文件名前缀，综合利用一下
# 类的对象及其属性，实例化，
class A :
    """A example class """
    x = 1 # 类属性
    def show(self): #类属性 foo，也是方法
        print(self.x)

class Person:
    def __init__(self,name):# 前后都有下划线的方法，我们称为魔术方法，初始化方法，当我们构造一个实例的过程，我们称为魔术方法
        #
        print(name)


print(A.show)
print(A.x)
print(A.__doc__)

a = A()


#  调用就是将实例和方法绑定在一起
#

print( A().show())
print(hex(id(A.show)))
#__init__方法
# MyClass() 实际上调用提是__init__(self) 方法，可以不定义，如果没有定义会在实例化后隐式调用
#