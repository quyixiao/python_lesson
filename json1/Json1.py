import json


d = dict(zip('abcdf',[None,True,False,[1,'abc'],{'a':1,'b':2}]))

s = json.dumps(d)

print(s,type(s))

s1 = """{"a": null, "b": true, "c": false, "d": [1, "abc"], "f": {"a": 1, "b": 2}}"""

print(s1)

d1 = json.loads(s1)

print(d1) # 看着像，但是完全不一样的东西，javaScript 中，非内存的形式来实现
# 我们依然用这种方式来认为是序列化的过程
# 将他转换成内存中的对象
# 算法都是一样的，
# 高效的代码
# 一般json编码的数据都很少落地，数据都是通过网络传输的，传输的时候，要考虑压缩它
# 本质上来说它就是一个文本，就是个字符串
# json很简单，几乎编程都支持Json，所以应用范围十分广泛
# 这个时候数据，ftp ，有些人在内外网导数据，然后才拷备到里面的，不能穿透
# 数据少落地，非必要不要落地，序列化更加，直接使用网络库的问题
# 传输过程中，还需要压缩，文本包，另当别论了，json数据，将空白字符压缩掉了
# 不要大量的传输一些数据过去，json 通过网络传输数据过去，通过协义来传输数据
# 本质上来说，json 生成数据就是一个文本，json ,所有的语言都支持文本
# 几乎没有语言不支持json
# plsql 都支持json
# go 语言也是支持的
# json 很简单，几乎语言编程都支持json ,所以json 的应用范围十分广泛



