# 我们是
# 预处理
# 如果排长队的奇舞团，是由于每个人打散的时候时间长度，因为要吃的菜没有，需要现在做，没有着饭不走开，
# 锁定着窗口
# 食堂可以提前统不计大多数人的最受的菜品，将最受吃的80%的热门菜，需要现做，没有打着饭走开
# 这样的大多数人，就算逛锁定窗口，也很快的释放窗口
# 一种
# 只打开一个窗口，有可能没有秩序，也就是谁抢到资源谁就上锁，排他性的锁，其他只能等候了
# 争抢也是一种高并发的方案，但是这样的不好，因为有可能有人很长的时间抢不到
# 3.预处理，
# 如果排长队的原因，由于每个人打菜的时间长，因为要吃的菜没有，需要现做，没有打着饭的走开，锁定窗口
# 食堂可以提前统计大多数人最受吃的菜品，将最爱吃的80%热门菜，提前做好，保证供应
# 一种提前加载用户需要的数据思路，预处理思想，缓存常用
# 如果用户需要的东西在的话
# 并行
# 成百上千消息中间件
# 上地，西二旗地铁站外的九曲回肠的走廊，缓冲人流，进去之后再多口安检进站
# 常见的消息中间件有RabbitMQ ,ActiveMQ(Apache),RocketMQ(),Kafka(Apache)等
# 当然还有其他的并发问题，但是已经列举除了觉的解决方案，例如多开食堂，
# 也可以把食堂建设到宿舍生活区就近，所以说，技术来源于生活
# 进程和线程
# 在实现了线程的操作系统，线程是操作系统能够进行运算调试的最小单位，它被包含在进程之中，是进程中的实际动作单位
# 一个程序在执行实例就是一个进程
# 进程和线程
# 在实现线程的操作系统中，线程是一个操作系统能够运行运算调试的最小单位，它被包含在进程之中，是进程中的实际动作单位，一个程序的执行
# 实例就是一个进程
# 进程，是计算中的程序关于某个数据集合上的一次运动，进程中存放着指令和数据的
# 进程和程序的关系
# 程序是源代码编译后的文件，而这些文件存入在磁盘上，当程序被操作系统加载到内存中，就是进程，进程中存入的指令和数据，它是线程的容器
# linux 进程有你进程，子进程，Window的进程是平等的关系
# 线程，有时被称为轻量级进程，是程序执行流的最小单元
# 一个标准的线程由线程ID,当前指令指针，寄存器
# 线程，有时被称为轻量级的进程，是程序执行流的最小单元
# 一个标准的线程由线程id,当前指令指针，寄存器集合和堆栈组成
# 在许多系统中，创建一个线程比创建一个进程快10-100倍
# 进程，线程的理解
# 等着我数据过来，数据准备好的，就绪状态，cpu ,cpu 就有可能再次调试，不管是cpu 调度还是操作系统调度，
# Python 中的线程开发使用的标准库
# Thread 类
# 签名
# def __init__(self,group=None,target=None,name=None,args=(),kwargs=None,*,daemon=None)
# 参数名           含义
# target       线程调用对象，返回值
# 通过threading.Thread创建一个线程对象，target的目标
# Python 的线程没有优先级，没有线程组的概念，也没有被销毁，停止，挂起，那也就没有恢复，中断了
# 线程的传参
#





import  threading
import  time

def worker():
    print('I worker start ')
    time.sleep(3)
    print('I workder end ')


print('111111111111111')
t = threading.Thread(target=worker)
t.start()
print('2222222222222222222222222')

if __name__ == '__main__':
    print('3333333333333333333333')